#ifndef MIK_SPRITE_H
#define MIK_SPRITE_H

#include "types.h"
#include "animator.h"
#include <vector>
#include <string>

namespace mik {
	struct Color {
		u8 r{ 0 }, g{ 0 }, b{ 0 };
	};

	constexpr u32 MikPaletteSize = 216;
	inline static const u32 PALETTE[] = {
		0x0, 0x33, 0x66, 0x99, 0xCC, 0xFF, 0x3300,
		0x3333, 0x3366, 0x3399, 0x33CC, 0x33FF, 0x6600,
		0x6633, 0x6666, 0x6699, 0x66CC, 0x66FF, 0x9900,
		0x9933, 0x9966, 0x9999, 0x99CC, 0x99FF, 0xCC00,
		0xCC33, 0xCC66, 0xCC99, 0xCCCC, 0xCCFF, 0xFF00,
		0xFF33, 0xFF66, 0xFF99, 0xFFCC, 0xFFFF, 0x330000,
		0x330033, 0x330066, 0x330099, 0x3300CC, 0x3300FF, 0x333300,
		0x333333, 0x333366, 0x333399, 0x3333CC, 0x3333FF, 0x336600,
		0x336633, 0x336666, 0x336699, 0x3366CC, 0x3366FF, 0x339900,
		0x339933, 0x339966, 0x339999, 0x3399CC, 0x3399FF, 0x33CC00,
		0x33CC33, 0x33CC66, 0x33CC99, 0x33CCCC, 0x33CCFF, 0x33FF00,
		0x33FF33, 0x33FF66, 0x33FF99, 0x33FFCC, 0x33FFFF, 0x660000,
		0x660033, 0x660066, 0x660099, 0x6600CC, 0x6600FF, 0x663300,
		0x663333, 0x663366, 0x663399, 0x6633CC, 0x6633FF, 0x666600,
		0x666633, 0x666666, 0x666699, 0x6666CC, 0x6666FF, 0x669900,
		0x669933, 0x669966, 0x669999, 0x6699CC, 0x6699FF, 0x66CC00,
		0x66CC33, 0x66CC66, 0x66CC99, 0x66CCCC, 0x66CCFF, 0x66FF00,
		0x66FF33, 0x66FF66, 0x66FF99, 0x66FFCC, 0x66FFFF, 0x990000,
		0x990033, 0x990066, 0x990099, 0x9900CC, 0x9900FF, 0x993300,
		0x993333, 0x993366, 0x993399, 0x9933CC, 0x9933FF, 0x996600,
		0x996633, 0x996666, 0x996699, 0x9966CC, 0x9966FF, 0x999900,
		0x999933, 0x999966, 0x999999, 0x9999CC, 0x9999FF, 0x99CC00,
		0x99CC33, 0x99CC66, 0x99CC99, 0x99CCCC, 0x99CCFF, 0x99FF00,
		0x99FF33, 0x99FF66, 0x99FF99, 0x99FFCC, 0x99FFFF, 0xCC0000,
		0xCC0033, 0xCC0066, 0xCC0099, 0xCC00CC, 0xCC00FF, 0xCC3300,
		0xCC3333, 0xCC3366, 0xCC3399, 0xCC33CC, 0xCC33FF, 0xCC6600,
		0xCC6633, 0xCC6666, 0xCC6699, 0xCC66CC, 0xCC66FF, 0xCC9900,
		0xCC9933, 0xCC9966, 0xCC9999, 0xCC99CC, 0xCC99FF, 0xCCCC00,
		0xCCCC33, 0xCCCC66, 0xCCCC99, 0xCCCCCC, 0xCCCCFF, 0xCCFF00,
		0xCCFF33, 0xCCFF66, 0xCCFF99, 0xCCFFCC, 0xCCFFFF, 0xFF0000,
		0xFF0033, 0xFF0066, 0xFF0099, 0xFF00CC, 0xFF00FF, 0xFF3300,
		0xFF3333, 0xFF3366, 0xFF3399, 0xFF33CC, 0xFF33FF, 0xFF6600,
		0xFF6633, 0xFF6666, 0xFF6699, 0xFF66CC, 0xFF66FF, 0xFF9900,
		0xFF9933, 0xFF9966, 0xFF9999, 0xFF99CC, 0xFF99FF, 0xFFCC00,
		0xFFCC33, 0xFFCC66, 0xFFCC99, 0xFFCCCC, 0xFFCCFF, 0xFFFF00,
		0xFFFF33, 0xFFFF66, 0xFFFF99, 0xFFFFCC, 0xFFFFFF
	};

	inline static const double DITHER_4x4[] = {
			0, 8, 2, 10,
			12, 4, 14, 6,
			3, 11, 1, 9,
			15, 7, 13, 5
	};

	namespace util {
		u8 dither(i32 x, i32 y, u8 comp);
		u8 palette(u8 r, u8 g, u8 b);
		u8 componentConvert(u8 comp);
		u8 rgbConvert(u8 comp);
	}

	class Sprite {
		public:
			Sprite() = default;
			virtual ~Sprite() = default;

			/// Load From PNG file
			Sprite(std::string const& fileName);

			/// Create blank
			Sprite(u32 width, u32 height);

			/// Draw a pixel
			void dot(i32 x, i32 y, u8 r, u8 g, u8 b);

			/// Clear
			void clear(u8 r = 0, u8 g = 0, u8 b = 0);

			/// Get pixel at X, Y
			Color get(i32 x, i32 y);

			u8* data() { return m_data.data(); }
			u32 width() const { return m_width; }
			u32 height() const { return m_height; }

			Animator& animator() { return m_animator; }

			u32 rows() const { return m_rows; }
			void rows(u32 v) { m_rows = v; }

			u32 cols() const { return m_cols; }
			void cols(u32 v) { m_cols = v; }

		private:
			Animator m_animator{};
			u32 m_rows{ 1 }, m_cols{ 1 };

			u32 m_width, m_height;
			std::vector<u8> m_data;
	};

	int decodePNG(
		std::vector<unsigned char>& out_image,
		unsigned long& image_width,
		unsigned long& image_height,
		const unsigned char* in_png,
		size_t in_size,
		bool convert_to_rgba32 = true
	);
}

#endif // MIK_SPRITE_H